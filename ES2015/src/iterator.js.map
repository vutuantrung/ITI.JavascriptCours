{"version":3,"sources":["../es2015/src/iterator.js"],"names":["toIterable","split","Iterable","iteratorFactory","Symbol","iterator","Iterator","onNext","IteratorResult","value","done","obj","string"],"mappings":";;;;;QA+BgBA,U,GAAAA,U;QASAC,K,GAAAA,K;;;;IAxCHC,Q;AACT;;;;QADSA,Q,GAKT,kBAAYC,eAAZ,EAA6B;AAAA;;AACzB,SAAKC,OAAOC,QAAZ,IAAwBF,eAAxB;AACH,C;;IAGQG,Q;AACT;;;;QADSA,Q,GAKT,kBAAYC,MAAZ,EAAoB;AAAA;;AAChB,SAAKA,MAAL,GAAcA,MAAd;AACH,C;AAEL;;;;;IAGaC,c,WAAAA,c,GACT,wBAAYC,KAAZ,EAAmBC,IAAnB,EAAyB;AAAA;AACxB,C;;AAGL;;;;;;AAIO,SAASV,UAAT,CAAoBW,GAApB,EAAyB,CAE/B;;AAED;;;;;AAKO,SAASV,KAAT,CAAeW,MAAf,EAAuB,CAE7B","file":"iterator.js","sourceRoot":"es2015","sourcesContent":["export class Iterable {\r\n    /**\r\n     * \r\n     * @param {*Function} iteratorFactory Fonction renvoyant un iterator\r\n     */\r\n    constructor(iteratorFactory) {\r\n        this[Symbol.iterator] = iteratorFactory;\r\n    }\r\n}\r\n\r\nexport class Iterator {\r\n    /**\r\n     * \r\n     * @param {*Function} onNext  callback qui sera appelée a chaque appel de la méthode next()\r\n     */\r\n    constructor(onNext) {\r\n        this.onNext = onNext;\r\n    }\r\n}\r\n/**\r\n * Résultat d'un itération\r\n */\r\nexport class IteratorResult {\r\n    constructor(value, done) {\r\n    }\r\n}\r\n\r\n/**\r\n * Rendre les propriétés d'un objet iterables\r\n * S'aider de la fonction Object.keys\r\n */\r\nexport function toIterable(obj) {\r\n   \r\n}\r\n\r\n/**\r\n * Prend une chaine de caractères et renvoie un itérable permettant d'itérer sur tout les\r\n * mots de la chaine. Les mots sont séparés par des espaces.\r\n * @param {*String} string \r\n */\r\nexport function split(string) {\r\n    \r\n}\r\n"]}