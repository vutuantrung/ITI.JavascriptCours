{"version":3,"sources":["../es2015/src/iterator.js"],"names":["toIterable","split","Iterable","iteratorFactory","Symbol","iterator","Iterator","onNext","IteratorResult","value","done","obj","keys","Object","i","next","length","string","array"],"mappings":";;;;;;;;QAsCgBA,U,GAAAA,U;QAoBAC,K,GAAAA,K;;;;IA1DHC,Q;AACT;;;;QADSA,Q,GAKT,kBAAYC,eAAZ,EAA6B;AAAA;;AACzB,SAAKC,OAAOC,QAAZ,IAAwBF,eAAxB;AACH,C;;IAGQG,Q,WAAAA,Q;AACT;;;;AAIA,sBAAYC,MAAZ,EAAoB;AAAA;;AAChB,aAAKA,MAAL,GAAcA,MAAd;AACH;;;;4BAES;AACN,mBAAO,KAAKA,MAAZ;AACH;;;;;AAGL;;;;;IAGaC,c,WAAAA,c,GACT,wBAAYC,KAAZ,EAAmBC,IAAnB,EAAyB;AAAA;;AACrB,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACH,C;;AAGL;;;;;;AAIO,SAASV,UAAT,CAAoBW,GAApB,EAAyB;AAC5BA,QAAIP,OAAOC,QAAX,IAAuB,YAAM;AACzB,YAAIO,OAAOC,OAAOD,IAAP,CAAYD,GAAZ,CAAX;AACA,YAAIG,IAAI,CAAC,CAAT;AACA,eAAO;AACHC,kBAAM,gBAAY;AACd,uBAAO;AACHN,2BAAOE,IAAIC,KAAK,EAAEE,CAAP,CAAJ,CADJ;AAEHJ,0BAAMI,MAAMF,KAAKI;AAFd,iBAAP;AAIH;AANE,SAAP;AAQH,KAXD;AAYH;;AAED;;;;;AAKO,SAASf,KAAT,CAAegB,MAAf,EAAuB;AAC1B,QAAIC,QAAQD,OAAOhB,KAAP,CAAa,GAAb,CAAZ;AACA,WAAOiB,MAAMd,OAAOC,QAAb,GAAP;AACH","file":"iterator.js","sourceRoot":"es2015","sourcesContent":["export class Iterable {\r\n    /**\r\n     * \r\n     * @param {*Function} iteratorFactory Fonction renvoyant un iterator\r\n     */\r\n    constructor(iteratorFactory) {\r\n        this[Symbol.iterator] = iteratorFactory;\r\n    }\r\n}\r\n\r\nexport class Iterator {\r\n    /**\r\n     * \r\n     * @param {*Function} onNext  callback qui sera appelée a chaque appel de la méthode next()\r\n     */\r\n    constructor(onNext) {\r\n        this.onNext = onNext;\r\n    }\r\n\r\n    get next(){\r\n        return this.onNext;\r\n    }\r\n\r\n}\r\n/**\r\n * Résultat d'un itération\r\n */\r\nexport class IteratorResult {\r\n    constructor(value, done) {\r\n        this.value = value;\r\n        this.done = done;\r\n    }\r\n}\r\n\r\n/**\r\n * Rendre les propriétés d'un objet iterables\r\n * S'aider de la fonction Object.keys\r\n */\r\nexport function toIterable(obj) {\r\n    obj[Symbol.iterator] = () => {\r\n        let keys = Object.keys(obj);\r\n        let i = -1;\r\n        return {\r\n            next: function () {\r\n                return {\r\n                    value: obj[keys[++i]],\r\n                    done: i === keys.length\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Prend une chaine de caractères et renvoie un itérable permettant d'itérer sur tout les\r\n * mots de la chaine. Les mots sont séparés par des espaces.\r\n * @param {*String} string \r\n */\r\nexport function split(string) {\r\n    let array = string.split(' ');\r\n    return array[Symbol.iterator]();\r\n}"]}