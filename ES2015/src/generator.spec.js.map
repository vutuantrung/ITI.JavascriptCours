{"version":3,"sources":["../es2015/src/generator.spec.js"],"names":["describe","it","done","obj","a","b","c","d","e","props","Symbol","iterator","toStringTag","length","Object","keys","prop","key","undefined","value","hasOwnProperty","emittedValue","emitter","Emitter","rand","Math","floor","random","emit","results","funcs","i","push","log","sequence","seqRes","to","be","eql"],"mappings":";;AAAA;;AACA;;;;AAEAA,SAAS,iBAAT,EAA4B,YAAM;AAC9BC,OAAG,iBAAH,EAAsB,UAACC,IAAD,EAAU;AAC5B,YAAIC,MAAM;AACNC,eAAG,CADG;AAENC,eAAG,GAFG;AAGNC,eAAG,IAHG;AAINC,eAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAJG;AAKNC,eAAG,aAAM,CAAG;AALN,SAAV;;AAQA,mCAAWL,GAAX;AACA,YAAIM,qCAAYN,GAAZ,EAAJ;AACA,YAAIF,KAAKE,IAAIO,OAAOC,QAAX,GAAT;;AAEA,0BACIV,GAAGS,OAAOE,WAAV,MAA2B,WAD/B,EAEI,wDAFJ;AAIA,0BACIH,MAAMI,MAAN,KAAiBC,OAAOC,IAAP,CAAYZ,GAAZ,EAAiBU,MADtC,qCAEqCC,OAAOC,IAAP,CAAYZ,GAAZ,EAAiBU,MAFtD;;AAjB4B;AAAA;AAAA;;AAAA;AAsB5B,iCAAiBV,GAAjB,8HAAsB;AAAA,oBAAba,IAAa;;AAClB,kCACIA,KAAKC,GAAL,IAAYC,SAAZ,IAAyBF,KAAKG,KAAL,IAAcD,SAD3C,EAEI,gDAFJ;AAIA,kCACIf,IAAIiB,cAAJ,CAAmBJ,KAAKC,GAAxB,CADJ,qBAEqBD,KAAKC,GAF1B;AAIA,kCACID,KAAKG,KAAL,KAAehB,IAAIa,KAAKC,GAAT,CADnB,qBAEqBD,KAAKC,GAF1B,8BAEsDd,IAAIa,KAAKC,GAAT,CAFtD;AAIH;AAnC2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoC5Bf;AACH,KArCD;;AAuCAD,OAAG,cAAH,EAAmB,UAACC,IAAD,EAAU;AACzB,YAAImB,qBAAJ;AACA,YAAIC,UAAU,IAAIC,kBAAJ,CAAY,UAACJ,KAAD,EAAW;AACjCE,2BAAeF,KAAf;AACH,SAFa,CAAd;AAGA,YAAIK,OAAOC,KAAKC,KAAL,CAAYD,KAAKE,MAAL,KAAgB,KAAjB,GAA0B,CAArC,CAAX;AACAL,gBAAQM,IAAR,CAAaJ,IAAb;AACA,0BACIH,iBAAiBG,IADrB,EAEI,wDAFJ;;AAKAA,eAAOC,KAAKC,KAAL,CAAYD,KAAKE,MAAL,KAAgB,KAAjB,GAA0B,CAArC,CAAP;AACAL,gBAAQM,IAAR,CAAaJ,IAAb;;AAEA,0BACIH,iBAAiBG,IADrB,EAEI,wDAFJ;AAIAtB;AACH,KApBD;;AAsBAD,OAAG,eAAH,EAAoB,UAACC,IAAD,EAAU;AAAA;;AAC1B,YAAI2B,UAAU,EAAd;AACA,YAAIC,QAAQ,EAAZ;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,EAApB,EAAwBA,GAAxB,EAA6B;AACzBD,kBAAME,IAAN,CAAW,YAAM;AACb,oBAAIR,OAAOC,KAAKC,KAAL,CAAYD,KAAKE,MAAL,KAAgB,KAAjB,GAA0B,CAArC,CAAX;AACAE,wBAAQG,IAAR,CAAaR,IAAb;AACA,uBAAOA,IAAP;AACH,aAJD;AAKH;AACD,6BAAQS,GAAR,oCAAeC,qCAAYJ,KAAZ,CAAf;AACA,YAAIK,sCAAaD,qCAAYJ,KAAZ,CAAb,EAAJ;AACA,0BACIA,MAAMjB,MAAN,KAAiBgB,QAAQhB,MAD7B,qBAEqBiB,MAAMjB,MAF3B;AAIA,0BAAOgB,OAAP,EAAgBO,EAAhB,CAAmBC,EAAnB,CAAsBC,GAAtB,CAA0BH,MAA1B;AACAjC;AACH,KAlBD;AAmBH,CAjFD","file":"generator.spec.js","sourceRoot":"es2015","sourcesContent":["import { assert, expect, should } from \"chai\";\r\nimport { toIterable, sequence, Emitter } from './generator';\r\n\r\ndescribe(\"Generator Tests\", () => {\r\n    it(\"toIterable test\", (done) => {\r\n        let obj = {\r\n            a: 1,\r\n            b: \"a\",\r\n            c: true,\r\n            d: [1, 2, 3],\r\n            e: () => { }\r\n        };\r\n\r\n        toIterable(obj);\r\n        let props = [...obj];\r\n        let it = obj[Symbol.iterator]();\r\n\r\n        assert(\r\n            it[Symbol.toStringTag] === \"Generator\",\r\n            \"The iterator must be provided via a generator function\"\r\n        );\r\n        assert(\r\n            props.length === Object.keys(obj).length,\r\n            `the properties length must be ${Object.keys(obj).length}`\r\n        );\r\n\r\n        for (let prop of obj) {\r\n            assert(\r\n                prop.key != undefined && prop.value != undefined,\r\n                'The iteration value must be a key/value object'\r\n            );\r\n            assert(\r\n                obj.hasOwnProperty(prop.key),\r\n                `the property '${prop.key}' does not exists on the object`\r\n            );\r\n            assert(\r\n                prop.value === obj[prop.key],\r\n                `the property '${prop.key}' must have the value ${obj[prop.key]}`\r\n            );\r\n        }\r\n        done();\r\n    });\r\n\r\n    it(\"Emitter test\", (done) => {\r\n        let emittedValue;\r\n        let emitter = new Emitter((value) => {\r\n            emittedValue = value;\r\n        });\r\n        let rand = Math.floor((Math.random() * 10000) + 1);\r\n        emitter.emit(rand);\r\n        assert(\r\n            emittedValue === rand,\r\n            \"The receiver function should receive the emitted value\"\r\n        );\r\n\r\n        rand = Math.floor((Math.random() * 10000) + 1);\r\n        emitter.emit(rand);\r\n\r\n        assert(\r\n            emittedValue === rand,\r\n            \"The receiver function should receive the emitted value\"\r\n        );\r\n        done();\r\n    });\r\n\r\n    it(\"sequence test\", (done) => {\r\n        let results = [];\r\n        let funcs = [];\r\n        for (let i = 0; i < 50; i++) {\r\n            funcs.push(() => {\r\n                let rand = Math.floor((Math.random() * 10000) + 1);\r\n                results.push(rand);\r\n                return rand;\r\n            })\r\n        }\r\n        console.log(...sequence(...funcs));\r\n        let seqRes = [...sequence(...funcs)];\r\n        assert(\r\n            funcs.length === results.length,\r\n            `There must be ${funcs.length} results`\r\n        );\r\n        expect(results).to.be.eql(seqRes);\r\n        done();\r\n    })\r\n});\r\n"]}