{"version":3,"sources":["../es2015/src/promises.spec.js"],"names":["describe","count","it","done","time","Date","getTime","delayTime","then","endtime","elapsed","roundedElapsed","Math","round","catch","e","timeA","floor","random","timeB","resolvedA","resolvedB","Promise","resolve","setTimeout","r","Array","length","to","be","eql","promises","sum","asserts","i","push","reject","results","sumResult","reduce","prev","current"],"mappings":"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","file":"promises.spec.js","sourceRoot":"es2015","sourcesContent":["import { assert, expect, should } from \"chai\";\r\nimport { delay, chain, combine } from \"./promises\";\r\n\r\ndescribe(\"Promise Tests\", function() {\r\n    const count = 50;\r\n\r\n    it(\"Test de la fonction delay\", function(done) {\r\n        let time = new Date().getTime();\r\n        let delayTime = 200;\r\n\r\n        delay(delayTime).then(() => {\r\n            let endtime = new Date().getTime();\r\n            let elapsed = endtime - time;\r\n            let roundedElapsed = Math.round(elapsed / 100) * 100;\r\n            assert( roundedElapsed === delayTime, `The delay must be of ${delayTime}. Elapsed time is ${elapsed}`);\r\n            done();\r\n        }).catch( e => done(e));\r\n    });\r\n\r\n    it(\"Test de la fonction combine\", function(done) {\r\n        let timeA  = Math.floor((Math.random() * 50) + 10);\r\n        let timeB  = Math.floor((Math.random() * 50) + 10);\r\n        let resolvedA = false;\r\n        let resolvedB = false;\r\n        \r\n        combine(new Promise((resolve) => {\r\n            setTimeout(()=> {\r\n                resolvedA = true;\r\n                resolve(1);\r\n            }, timeA);\r\n        }), new Promise((resolve) => {\r\n            setTimeout(()=>{\r\n                resolvedB = true;\r\n                resolve(2);\r\n            }, timeB);\r\n        })).then( r => {\r\n            assert( r instanceof Array, \"The result must be an array\" );\r\n            expect(r.length, \"result array length\").to.be.eql(2);\r\n            done();\r\n        });\r\n    });\r\n\r\n    it(\"Test de la fonction chain\", function(done) {\r\n        const promises = [];\r\n        let sum = 0;\r\n        const asserts = [];\r\n\r\n        // generate promises\r\n        for (let i = 0; i < count; i++) {\r\n            let time  = Math.floor((Math.random() * 50) + 10);\r\n            promises.push( new Promise((resolve, reject) => {\r\n                if (asserts.length > 0) {\r\n                    // assert that the previous promise is done\r\n                    assert(asserts[i-1] === i-1, \"The previous promise must be done\");\r\n                }\r\n\r\n                setTimeout(() => {\r\n                    sum += i;\r\n                    asserts.push(i);\r\n                    resolve(i);\r\n                }, time);\r\n            }));\r\n        }\r\n\r\n        // execute all method\r\n        chain(promises)\r\n            .then((results) => {\r\n                let sumResult = results.reduce((prev, current) => {\r\n                    return prev + current;\r\n                }, 0);\r\n                // assert that all the results are set\r\n                expect(results.length).to.be.eql(promises.length);\r\n                expect(sumResult).to.be.eql(sum);\r\n                done();\r\n            })\r\n            .catch( e => done(e));\r\n    });\r\n});\r\n\r\n"]}