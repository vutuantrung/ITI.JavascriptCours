{"version":3,"sources":["../es2015/src/promises.js"],"names":["chain","delay","combine","promises","millisecond","promise","Promise","resolve","reject","setTimeout","promiseA","promiseB","promiseResult"],"mappings":";;;;;QAQgBA,K,GAAAA,K;QAQAC,K,GAAAA,K;QAaAC,O,GAAAA,O;;AA7BhB;;AAEA;;;;;;AAMO,SAASF,KAAT,CAAeG,QAAf,EAAyB,CAE/B;;AAED;;;;AAIO,SAASF,KAAT,CAAeG,WAAf,EAA4B;AAC/B,QAAIC,UAAU,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC3CC,mBAAW,YAAM;AACbF,oBAAQ,SAAR;AACH,SAFD,EAEGH,WAFH;AAGH,KAJa,CAAd;AAKA,WAAOC,OAAP;AACH;;AAED;;;;AAIO,SAASH,OAAT,CAAiBQ,QAAjB,EAA2BC,QAA3B,EAAqC;AACxC,QAAIC,gBAAgB,IAAIN,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB,CAEpD,CAFmB,CAApB;AAGH","file":"promises.js","sourceRoot":"es2015","sourcesContent":["import { resolve } from \"path\";\r\n\r\n/**\r\n * Exécute de manière séquentielle de promises\r\n * \r\n * @param funcs tableau de fonctions retournant une promise\r\n * @return Une promise contenant tous les resultats de promises exécutées\r\n */\r\nexport function chain(promises) {\r\n    \r\n}\r\n\r\n/**\r\n * renvoie une promise qui sera resolue au bout d'un nombre définit de millisecondes\r\n * @param millisecond le nombre de millisecondes avant de résoudre la Promise\r\n */\r\nexport function delay(millisecond) {\r\n    var promise = new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            resolve('Success');\r\n        }, millisecond);\r\n    });\r\n    return promise;\r\n}\r\n\r\n/**\r\n * Chaine l'exécution de deux promise et retourne les résultats dans un tableau\r\n * @return une promise retournant le tableau des resultats des deux promise passées en paramètre\r\n */\r\nexport function combine(promiseA, promiseB) {\r\n    var promiseResult = new Promise((resolve, reject) => {\r\n\r\n    });\r\n}\r\n"]}