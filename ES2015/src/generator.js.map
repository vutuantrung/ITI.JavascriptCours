{"version":3,"sources":["../es2015/src/generator.js"],"names":["toIterable","sequence","obj","Symbol","iterator","keys","Object","index","n","length","value","key","funcs","list","call"],"mappings":";;;;;QAMgBA,U,GAAAA,U;QAoBCC,Q,GAAAA,Q;;AA1BjB;;mDA0BiBA,Q;;AAxBjB;;;;AAIO,SAASD,UAAT,CAAoBE,GAApB,EAAyB;AAC5BA,QAAIC,OAAOC,QAAX,yCAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AACfC,4BADe,GACRC,OAAOD,IAAP,CAAYH,GAAZ,CADQ;AAEfK,6BAFe,GAEP,CAFO;AAGbC,yBAHa,GAGTH,KAAKI,MAHI;;AAAA;AAAA,8BAIZF,QAAQC,CAJI;AAAA;AAAA;AAAA;;AAKXE,6BALW,GAKH;AACRC,iCAAKN,KAAKE,KAAL,CADG;AAERG,mCAAOR,IAAIG,KAAKE,KAAL,CAAJ;AAFC,yBALG;;AASfA;AATe;AAAA,+BAUTG,KAVS;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAvB;AAaH;;AAED;;;;AAIO,SAAUT,QAAV;AAAA,sCAAsBW,KAAtB;AAAsBA,aAAtB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,wBADD,aACYD,KADZ;AAECL,yBAFD,GAES,CAFT;AAGGC,qBAHH,GAGOK,KAAKJ,MAHZ;;AAAA;AAAA,0BAIIF,QAAQC,CAJZ;AAAA;AAAA;AAAA;;AAAA;AAAA,2BASOK,KAAKN,OAAL,EAAcO,IAAd,EATP;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","file":"generator.js","sourceRoot":"es2015","sourcesContent":["import 'babel-polyfill';\r\n\r\n/**\r\n * Même exercice que pour iterator\r\n * Mais en utilisant un generator\r\n */\r\nexport function toIterable(obj) {\r\n    obj[Symbol.iterator] = function* () {\r\n        let keys = Object.keys(obj);\r\n        let index = 0;\r\n        const n = keys.length;\r\n        while (index < n) {\r\n            let value = {\r\n                key: keys[index],\r\n                value: obj[keys[index]]\r\n            }\r\n            index++;\r\n            yield value;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * exécuter toutes les fonctions et retourner les resultats \r\n * sous forme d'iterator grâce au mot clé yield\r\n */\r\nexport function* sequence(...funcs) {\r\n    let list = [...funcs];\r\n    var index = 0;\r\n    const n = list.length;\r\n    while (index < n) {\r\n        /*\r\n        yield list[index].call();\r\n        index++;\r\n        */\r\n        yield list[index++].call();\r\n    }\r\n}"]}