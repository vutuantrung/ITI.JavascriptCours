{"version":3,"sources":["../es2015/src/generator.js"],"names":["toIterable","sequence","obj","funcs","list","listResult","n","length","i","push","call"],"mappings":";;;;;QAMgBA,U,GAAAA,U;QAQCC,Q,GAAAA,Q;;AAdjB;;mDAciBA,Q;;AAZjB;;;;AAIO,SAASD,UAAT,CAAoBE,GAApB,EAAyB,CAE/B;;AAED;;;;AAIO,SAAUD,QAAV;AAAA,oCAAsBE,KAAtB;AAAsBA,SAAtB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,cADD,aACYD,KADZ;AAECE,oBAFD,GAEc,EAFd;AAGGC,WAHH,GAGOF,KAAKG,MAHZ;AAIMC,WAJN,GAIU,CAJV;;AAAA;AAAA,gBAIaA,IAAIF,IAAI,CAJrB;AAAA;AAAA;AAAA;;AAAA;AAAA,iBAKOE,IAAI,CALX;;AAAA;AAMCH,qBAAWI,IAAX,CAAgBL,KAAKI,CAAL,EAAQE,IAAR,EAAhB;;AAND;AAIwBF,aAJxB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","file":"generator.js","sourceRoot":"es2015","sourcesContent":["import 'babel-polyfill';\r\n\r\n/**\r\n * Même exercice que pour iterator\r\n * Mais en utilisant un generator\r\n */\r\nexport function toIterable(obj) {\r\n\r\n}\r\n\r\n/**\r\n * exécuter toutes les fonctions et retourner les resultats \r\n * sous forme d'iterator grâce au mot clé yield\r\n */\r\nexport function *sequence(...funcs) {\r\n    let list = [...funcs];\r\n    let listResult = []\r\n    const n = list.length;\r\n    for (let i = 0; i < n - 1; i++) {\r\n        yield i + 1;\r\n        listResult.push(list[i].call());\r\n    }\r\n}"]}